# -*- coding: utf-8 -*-
"""SONAR Rock vs Mine Prediction With Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ua3Z3aj-cQVb-qY_YT_GpxgqUGNH2rzM

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Data Processing


"""

# loading the dataset to a pandas dataframe
sonar_data=pd.read_csv('/content/Copy of sonar data.csv',header=None)
print(sonar_data)

sonar_data.head

sonar_data.head()

sonar_data.tail()

sonar_data.shape # number of rows and columns

"""description of data in terms pof statistical methods"""

sonar_data.describe()

sonar_data[60].value_counts()

"""M--> Mine
R-->Rocks
"""

sonar_data.groupby(60).mean() # mean for mine and rock in each columns

sonar_data.groupby(60).median() # Median for mine and rock in each columns

sonar_data.groupby(60).max() # gives maximum value in respective columns

sonar_data.groupby(60).min() #  gives minimum value in respective columns

# separating data and labels
X= sonar_data.drop(columns=60,axis=1)
Y=sonar_data[60]

print(X)
print(Y)

"""Training and testing data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)
print(Y_train)

"""Model Training--> Logistric Regression


"""

model=LogisticRegression()

# training the logistric regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

# Accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy Score Of Training Data:',training_data_accuracy)

# Accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of Testing Data:',test_data_accuracy)

"""Making a Predictive System"""

input_data=(0.0223,0.0375,0.0484,0.0475,0.0647,0.0591,0.0753,0.0098,0.0684,0.1487,0.1156,0.1654,0.3833,0.3598,0.1713,0.1136,0.0349,0.3796,0.7401,0.9925,0.9802,0.8890,0.6712,0.4286,0.3374,0.7366,0.9611,0.7353,0.4856,0.1594,0.3007,0.4096,0.3170,0.3305,0.3408,0.2186,0.2463,0.2726,0.1680,0.2792,0.2558,0.1740,0.2121,0.1099,0.0985,0.1271,0.1459,0.1164,0.0777,0.0439,0.0061,0.0145,0.0128,0.0145,0.0058,0.0049,0.0065,0.0093,0.0059,0.0022)
# changing the input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)

# reshape the np array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)

